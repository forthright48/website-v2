(function() {
  'use strict';

  const path = require('path');
  const root = path.join(__dirname, '../../..');
  const secret = process.env.SECRET_TOKEN || require(path.join(root, '/secret.js')).secret;
  const db = process.env.MONGOLAB_URI || require(path.join(root, '/secret.js')).db;

  /*Configure mailer*/
  const sendGridAPI = process.env.SEND_GRID_API ||
    require(path.join(root, '/secret.js')).sendGridAPI;
  const nodemailer = require('nodemailer');
  const sgTransport = require('nodemailer-sendgrid-transport');
  const mailer = nodemailer.createTransport(sgTransport({
    auth: {
      api_key: sendGridAPI // eslint-disable-line camelcase
    }
  }));

  /*Encryption Related Configuartion*/
  const bcryptWorkLoad = 10;

  const validate = {
    /// User name contains letters, numbers and underscores only.
    username(username) {
      const re = /^[a-zA-Z0-9_]+$/;
      return re.test(username);
    },
    /// One cannot validate email address with regex. Only way is to send mail and validate.
    email(email) {
      const re = /.+@.+/;
      return re.test(email);
    }
  };

  module.exports = {
    root,
    handleError,
    secret: {
      secret,
      db
    },
    getLayoutContext,
    myRender,
    bcryptWorkLoad,
    validate,
    mailer
  };

  /*******************************************
  Implementation
  *******************************************/

  // Create an object wrapper for errors
  function handleError(req, res, error, realError) {
    const context = {
      error,
      realError
    };
    const subtitle = 'error';
    getLayoutContext(req, subtitle, context);

    return res.render('error', context);
  }

  // Returns Context of Layout
  function getLayoutContext(req, subtitle, context) {
    const session = req.session || {};

    let superUser = false;
    if (session && session.status !== 'user') superUser = true;

    let adminMode = false;
    if (session && session.adminMode) adminMode = true;

    context.isLoggedIn = session.isLoggedIn;
    context.username = session.username;
    context.subtitle = subtitle;
    context.superUser = superUser;
    context.adminMode = adminMode;
  }

  function getSubtitle(view) {
    if (view === 'success') return view;
    else if (view === 'home') return view;
    else if (view === 'problem-creation/problem-creation') return 'problem-creation';
    else if (view === 'gateway/gateway') return 'gateway';
    else if (view === 'cpps/cpps') return 'cpps';
    else if (view === 'users/login') return 'login';
    return 'null';
  }

  // Automatically injects the context of layout
  function myRender(req, res, view, context = {}) {
    const subtitle = getSubtitle(view);

    getLayoutContext(req, subtitle, context);

    return res.render(view, context);
  }
}());
