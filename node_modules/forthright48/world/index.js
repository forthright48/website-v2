(function(){
    "use strict";

    var path = require ( "path" );

    var root = path.join ( __dirname, "../../.." );
    var secret = process.env.SECRET_TOKEN || require ( path.join ( root, "/secret.js" ) ).secret;
    var db = process.env.MONGOLAB_URI || require ( path.join ( root, "/secret.js" ) ).db;

    var bcryptWorkLoad = 10;

    module.exports = {
        root: root,
        handleError: handleError,
        secret: {
            secret: secret,
            db: db
        },
        getLayoutContext: getLayoutContext,
        myRender: myRender,
        bcryptWorkLoad: bcryptWorkLoad

    };

    /*******************************************
    Implementation
    *******************************************/

    // Create an object wrapper for errors
    function handleError ( req, res, error, realError ) {
        var context = {
            error: error,
            realError: realError
        };
        var subtitle = "error";
        getLayoutContext ( req, subtitle, context );

        return res.render ( "error", context);
    }

    // Returns Context of Layout
    function getLayoutContext( req, subtitle, context ) {
        var session = req.session || {};

        var superUser = false;
        if ( session && session.status !== 'user' ) superUser = true;

        var adminMode = false;
        if ( session && session.adminMode ) adminMode = true;

        context.isLoggedIn = session.isLoggedIn;
        context.username = session.username;
        context.subtitle = subtitle;
        context.superUser = superUser;
        context.adminMode = adminMode;
    }

    function getSubtitle ( view ) {
        if ( view === 'success' ) return view;
        else if ( view === 'home' ) return view;
        else if ( view === 'problem-creation/problem-creation' ) return 'problem-creation';
        else if ( view === 'gateway/gateway') return 'gateway';
        else if ( view === 'cpps/cpps') return 'cpps';
        else if ( view === 'users/login') return 'login';
        return "null";
    }

    // Automatically injects the context of layout
    function myRender ( req, res, view, context ) {
        context = context || {}; ///In case it is empty
        var subtitle = getSubtitle ( view );

        getLayoutContext ( req, subtitle, context );

        return res.render ( view, context );
    }

}());
